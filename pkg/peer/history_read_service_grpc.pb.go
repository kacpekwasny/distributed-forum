// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: history_read_service.proto

package peer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HistoryReadServiceClient is the client API for HistoryReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryReadServiceClient interface {
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserPublicInfo, error)
	GetAge(ctx context.Context, in *AgeRequest, opts ...grpc.CallOption) (*Age, error)
	GetAges(ctx context.Context, in *AgesRequest, opts ...grpc.CallOption) (*AgeList, error)
	GetStory(ctx context.Context, in *StoryRequest, opts ...grpc.CallOption) (*Story, error)
	GetStories(ctx context.Context, in *StoriesRequest, opts ...grpc.CallOption) (*StoryList, error)
	GetAnswer(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*Answer, error)
	GetAnswers(ctx context.Context, in *AnswersRequest, opts ...grpc.CallOption) (*StoryList, error)
}

type historyReadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryReadServiceClient(cc grpc.ClientConnInterface) HistoryReadServiceClient {
	return &historyReadServiceClient{cc}
}

func (c *historyReadServiceClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserPublicInfo, error) {
	out := new(UserPublicInfo)
	err := c.cc.Invoke(ctx, "/peer.HistoryReadService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyReadServiceClient) GetAge(ctx context.Context, in *AgeRequest, opts ...grpc.CallOption) (*Age, error) {
	out := new(Age)
	err := c.cc.Invoke(ctx, "/peer.HistoryReadService/GetAge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyReadServiceClient) GetAges(ctx context.Context, in *AgesRequest, opts ...grpc.CallOption) (*AgeList, error) {
	out := new(AgeList)
	err := c.cc.Invoke(ctx, "/peer.HistoryReadService/GetAges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyReadServiceClient) GetStory(ctx context.Context, in *StoryRequest, opts ...grpc.CallOption) (*Story, error) {
	out := new(Story)
	err := c.cc.Invoke(ctx, "/peer.HistoryReadService/GetStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyReadServiceClient) GetStories(ctx context.Context, in *StoriesRequest, opts ...grpc.CallOption) (*StoryList, error) {
	out := new(StoryList)
	err := c.cc.Invoke(ctx, "/peer.HistoryReadService/GetStories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyReadServiceClient) GetAnswer(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/peer.HistoryReadService/GetAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyReadServiceClient) GetAnswers(ctx context.Context, in *AnswersRequest, opts ...grpc.CallOption) (*StoryList, error) {
	out := new(StoryList)
	err := c.cc.Invoke(ctx, "/peer.HistoryReadService/GetAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryReadServiceServer is the server API for HistoryReadService service.
// All implementations must embed UnimplementedHistoryReadServiceServer
// for forward compatibility
type HistoryReadServiceServer interface {
	GetUser(context.Context, *UserRequest) (*UserPublicInfo, error)
	GetAge(context.Context, *AgeRequest) (*Age, error)
	GetAges(context.Context, *AgesRequest) (*AgeList, error)
	GetStory(context.Context, *StoryRequest) (*Story, error)
	GetStories(context.Context, *StoriesRequest) (*StoryList, error)
	GetAnswer(context.Context, *AnswerRequest) (*Answer, error)
	GetAnswers(context.Context, *AnswersRequest) (*StoryList, error)
	mustEmbedUnimplementedHistoryReadServiceServer()
}

// UnimplementedHistoryReadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHistoryReadServiceServer struct {
}

func (UnimplementedHistoryReadServiceServer) GetUser(context.Context, *UserRequest) (*UserPublicInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedHistoryReadServiceServer) GetAge(context.Context, *AgeRequest) (*Age, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAge not implemented")
}
func (UnimplementedHistoryReadServiceServer) GetAges(context.Context, *AgesRequest) (*AgeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAges not implemented")
}
func (UnimplementedHistoryReadServiceServer) GetStory(context.Context, *StoryRequest) (*Story, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStory not implemented")
}
func (UnimplementedHistoryReadServiceServer) GetStories(context.Context, *StoriesRequest) (*StoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStories not implemented")
}
func (UnimplementedHistoryReadServiceServer) GetAnswer(context.Context, *AnswerRequest) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswer not implemented")
}
func (UnimplementedHistoryReadServiceServer) GetAnswers(context.Context, *AnswersRequest) (*StoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswers not implemented")
}
func (UnimplementedHistoryReadServiceServer) mustEmbedUnimplementedHistoryReadServiceServer() {}

// UnsafeHistoryReadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryReadServiceServer will
// result in compilation errors.
type UnsafeHistoryReadServiceServer interface {
	mustEmbedUnimplementedHistoryReadServiceServer()
}

func RegisterHistoryReadServiceServer(s grpc.ServiceRegistrar, srv HistoryReadServiceServer) {
	s.RegisterService(&HistoryReadService_ServiceDesc, srv)
}

func _HistoryReadService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryReadServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.HistoryReadService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryReadServiceServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryReadService_GetAge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryReadServiceServer).GetAge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.HistoryReadService/GetAge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryReadServiceServer).GetAge(ctx, req.(*AgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryReadService_GetAges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryReadServiceServer).GetAges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.HistoryReadService/GetAges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryReadServiceServer).GetAges(ctx, req.(*AgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryReadService_GetStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryReadServiceServer).GetStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.HistoryReadService/GetStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryReadServiceServer).GetStory(ctx, req.(*StoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryReadService_GetStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryReadServiceServer).GetStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.HistoryReadService/GetStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryReadServiceServer).GetStories(ctx, req.(*StoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryReadService_GetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryReadServiceServer).GetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.HistoryReadService/GetAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryReadServiceServer).GetAnswer(ctx, req.(*AnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryReadService_GetAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryReadServiceServer).GetAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.HistoryReadService/GetAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryReadServiceServer).GetAnswers(ctx, req.(*AnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoryReadService_ServiceDesc is the grpc.ServiceDesc for HistoryReadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryReadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "peer.HistoryReadService",
	HandlerType: (*HistoryReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _HistoryReadService_GetUser_Handler,
		},
		{
			MethodName: "GetAge",
			Handler:    _HistoryReadService_GetAge_Handler,
		},
		{
			MethodName: "GetAges",
			Handler:    _HistoryReadService_GetAges_Handler,
		},
		{
			MethodName: "GetStory",
			Handler:    _HistoryReadService_GetStory_Handler,
		},
		{
			MethodName: "GetStories",
			Handler:    _HistoryReadService_GetStories_Handler,
		},
		{
			MethodName: "GetAnswer",
			Handler:    _HistoryReadService_GetAnswer_Handler,
		},
		{
			MethodName: "GetAnswers",
			Handler:    _HistoryReadService_GetAnswers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "history_read_service.proto",
}
